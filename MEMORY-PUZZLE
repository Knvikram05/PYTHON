// SIMPLE MEMORY PUZZLE GAME

from kivy.app import App
from kivy.uix.gridlayout import GridLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.clock import Clock
from random import shuffle
from kivy.uix.boxlayout import BoxLayout
from kivy.core.window import Window

class MemoryMatchGame(App):
    def __init__(self, **kwargs):
        super(MemoryMatchGame, self).__init__(**kwargs)
        self.cards = list(range(1, 9)) * 2  # 16 cards with numbers 1-8 (duplicated) 
        shuffle(self.cards)  # Shuffle the cards
        self.first_card = None
        self.second_card = None
        self.can_click = False  # Initially disable clicking until "Start Game" is clicked
        self.flip_count = 0
        self.time_limit = 30  # Time limit in seconds
        self.timer_event = None
        self.game_started = False

    def build(self):
        self.main_layout = BoxLayout(orientation='vertical')

        # Button layout
        button_layout = BoxLayout(size_hint=(1, None), height=50)

        # New game button
        self.new_game_button = Button(text="New Game", on_press=self.start_new_game, size_hint=(None, None), size=(100, 50))
        button_layout.add_widget(self.new_game_button)

        # Spacer widget to push the Start Game button to the right
        button_layout.add_widget(Label())

        # Start game button
        self.start_game_button = Button(text="Start Game", on_press=self.start_game, size_hint=(None, None), size=(100, 50))
        button_layout.add_widget(self.start_game_button)

        # Add button layout to the main layout
        self.main_layout.add_widget(button_layout)
        
        # Timer label
        self.timer_label = Label(text=str(self.time_limit), size_hint_y=None, height=100, font_size=40)  # Increase font size
        self.main_layout.add_widget(self.timer_label)
        
        # Game grid layout
        self.layout = GridLayout(cols=4, spacing=10)
        self.buttons = [Button(on_press=self.on_card_click) for _ in range(16)]
        for button in self.buttons:
            self.layout.add_widget(button)
        self.main_layout.add_widget(self.layout)

        return self.main_layout

    def start_game(self, instance):
        if not self.game_started:
            self.can_click = True
            self.start_timer()
            self.game_started = True
            self.start_game_button.disabled = True

    def on_card_click(self, button):
        if not self.can_click or button.disabled:
            return
        index = self.buttons.index(button)
        if index == self.first_card:  # Prevent clicking the same card twice
            return
        button.text = str(self.cards[index])  # Show the number on the card
        if self.first_card is None:
            self.first_card = index
        else:
            self.second_card = index
            self.can_click = False  # Disable clicking while checking for a match
            Clock.schedule_once(self.check_match, 1)  # Check for match after 1 second
            self.flip_count += 1

    def check_match(self, dt):
        if self.cards[self.first_card] == self.cards[self.second_card]:
            self.buttons[self.first_card].disabled = True  # Disable matched cards
            self.buttons[self.second_card].disabled = True
        else:
            self.buttons[self.first_card].text = ''  # Hide unmatched cards
            self.buttons[self.second_card].text = ''
        self.first_card = None
        self.second_card = None
        self.can_click = True  # Enable clicking again

    def start_timer(self):
        self.timer_event = Clock.schedule_interval(self.update_timer, 1)

    def update_timer(self, dt):
        self.time_limit -= 1
        self.timer_label.text = str(max(self.time_limit, 0))
        if self.time_limit <= 0:
            self.end_game()

    def end_game(self):
        # Stop the timer
        if self.timer_event:
            self.timer_event.cancel()
        
        # Check if all cards are disabled (all pairs matched)
        if all(button.disabled for button in self.buttons):
            print("Congratulations! You won!")
        else:
            print("Sorry, you lost. Better luck next time.")

    def start_new_game(self, instance):
        # Reset game variables
        self.cards = list(range(1, 9)) * 2
        shuffle(self.cards)
        self.first_card = None
        self.second_card = None
        self.can_click = False
        self.flip_count = 0
        self.time_limit = 30
        self.game_started = False
        
        # Reset UI
        for button in self.buttons:
            button.disabled = False
            button.text = ''
        self.timer_label.text = str(self.time_limit)
        self.start_game_button.disabled = False

if __name__ == '__main__':
    Window.size = (400, 600)  # Adjust window size
    MemoryMatchGame().run()
